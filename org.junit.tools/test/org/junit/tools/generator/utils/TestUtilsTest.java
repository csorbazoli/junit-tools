/**
 * This class was generated by GenTest@Mobacar
 */
package org.junit.tools.generator.utils;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.tools.generator.utils.TestUtils.BenchmarkResults;
import org.junit.tools.generator.utils.TestUtils.TestUtilException;
import org.junit.tools.generator.utils.testmodel.DummyClass;
import org.junit.tools.generator.utils.testmodel.DummyClassWithDates;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;

@RunWith(MockitoJUnitRunner.class)
public class TestUtilsTest {

    private int cnt = 0;

    @Before
    public void setupTest() {
	// prepare test
    }

    @Test
    public void testGetSimplestAnswer() throws Throwable {
	// given
	int argumentIdx = 0;
	// when
	Answer<Object> actual = TestUtils.getSimplestAnswer(argumentIdx);
	// then
	assertNotNull(actual);
	InvocationOnMock invocation = Mockito.mock(InvocationOnMock.class);
	when(invocation.getArgument(argumentIdx)).thenReturn("WORKS");
	assertEquals("WORKS", actual.answer(invocation));
    }

    @Test
    public void testReadObjectFromJSONFile() throws Exception {
	// given
	String relativePath = "samples/sample_formatted.json";
	Class<DummyClass> clazz = DummyClass.class;
	// when
	Object actual = TestUtils.readObjectFromJsonFile(relativePath, clazz);
	// then
	assertNotNull(actual);
    }

    @Test
    public void testReadObjectListFromJSONFile() throws Exception {
	// given
	String relativePath = "samples/sample_array_formatted.json";
	Class<DummyClass> clazz = DummyClass.class;
	// when
	List<DummyClass> actual = TestUtils.readObjectListFromJsonFile(relativePath, clazz);
	// then
	assertEquals("test", actual.get(0).getName());
    }

    @Test
    public void testReadTestFile() throws Exception {
	// given
	String relativePath = "samples/sample_oneline.json";
	// when
	String actual = TestUtils.readTestFile(relativePath);
	// then
	assertEquals("{\"Name\":\"test\",\"Number\":1}", actual);
    }

    @Test(expected = TestUtilException.class)
    public void testReadTestFile_failure() throws Exception {
	// given
	String relativePath = "nonexistent";
	// when
	String actual = TestUtils.readTestFile(relativePath);
	// then
	fail("Should have failed: " + actual);
    }

    @Test
    public void testReadTestFileBinary() throws Exception {
	// given
	String relativePath = "samples/sample_oneline.json";
	// when
	byte[] actual = TestUtils.readTestFileBinary(relativePath);
	// then
	assertArrayEquals("{\"Name\":\"test\",\"Number\":1}".getBytes(), actual);
    }

    @Test(expected = TestUtilException.class)
    public void testReadTestFileBinary_failure() throws Exception {
	// given
	String relativePath = "nonexistent";
	// when
	byte[] actual = TestUtils.readTestFileBinary(relativePath);
	// then
	fail("Should have failed: " + actual);
    }

    @Test
    public void testReplaceHashCodes() throws Exception {
	// given
	String toString = toString();
	// when
	String actual = TestUtils.replaceHashCodes(toString);
	// then
	assertEquals("org.junit.tools.generator.utils.TestUtilsTest@HASH", actual);
    }

    @Test
    public void testWaiting() throws Exception {
	// given
	long start = System.currentTimeMillis();
	// when
	TestUtils.waiting(100);
	// then
	long elapsed = System.currentTimeMillis() - start;
	assertTrue("Should have waited for at least 100ms but was only " + elapsed + "ms", elapsed >= 100);
    }

    @Test
    public void testObjectToJSON_null() throws Exception {
	// given
	Object object = null;
	// when
	String actual = TestUtils.objectToJson(object);
	// then
	assertEquals("{}", actual);
    }

    @Test
    public void testObjectToJSON() throws Exception {
	// given
	DummyClass object = new DummyClass(null, 3);
	// when
	String actual = TestUtils.objectToJson(object);
	// then
	assertEquals("{\n" +
		"  \"name\" : null,\n" +
		"  \"number\" : 3\n" +
		"}", actual);
    }

    @Test
    public void testObjectToJSON_withDate() throws Exception {
	// given
	DummyClassWithDates object = new DummyClassWithDates();
	LocalDateTime dateTime = LocalDateTime.parse("2021-11-17T12:34:56");
	object.setLocalDateTime(dateTime);
	object.setLocalDate(dateTime.toLocalDate());
	object.setDate(Date.from(dateTime.atZone(ZoneId.of("+01:00")).toInstant()));
	// when
	String actual = TestUtils.objectToJson(object);
	// then
	assertEquals("{\n" +
		"  \"date\" : \"2021-11-17T11:34:56.000+00:00\",\n" + // Date should be printed GMT
		"  \"localDate\" : \"2021-11-17\",\n" +
		"  \"localDateTime\" : \"2021-11-17T12:34:56\"\n" +
		"}", actual);
    }

    @Test
    public void testBenchmark() throws Exception {
	// given
	cnt = 1;
	// when
	BenchmarkResults<String> actual = TestUtils.benchmark("test-case", 100, this::benchmarkMethod);
	// then
	assertEquals("TEST100", actual.getLastResult());
	assertEquals(100, actual.getIterations());
    }

    private String benchmarkMethod() {
	return "TEST" + cnt++;
    }

}